import Order from "../models/order.js";
import Product from "../models/product.js";
import { isCustomer } from "../controllers/userController.js"; // import isCustomer function


export async function createOrder(req, res) {
  if (!isCustomer) {
    res.json({ message: "Please login as customer to create orders" });
    return; // Ensure early return
  }

  try {
    const latestOrder = await Order.find().sort({ date: -1 }).limit(1); // Fetch the latest order
    console.log("Latest Order Query Result:", latestOrder); // Debug log

    let orderId; // Define variable to assign order ID

    // Handle the case where no orders exist
    if (latestOrder.length === 0) {
      orderId = "CBC1001"; // Assign the first order ID
    } else {
      const currentOrderId = latestOrder[0].orderId; // Safely access the first element
      const numberString = currentOrderId.replace("CBC", ""); // Extract number from CBC
      const number = parseInt(numberString); // Convert string to number
      const newNumber = (number + 1).toString().padStart(4, "0"); // Increment number by 1, add leading zero
      orderId = "CBC" + newNumber; // Concatenate CBC with incremented number
    }

    const newOrderData = req.body; // Get order data from request body
    const newProductArray = []; // Define product array to validate product IDs

    for (let i = 0; i < newOrderData.orderedItems.length; i++) { // Loop through ordered items
      const product = await Product.findOne({ productId: newOrderData.orderedItems[i].productId });

      if (!product) { // Check if the product exists
        res.json({ message: "Product with ID " + newOrderData.orderedItems[i].productId + " not found" });
        return; // Stop processing if product is not found
      }

      newProductArray[i] = {
        name: product.name,
        price: product.price,
        quantity: newOrderData.orderedItems[i].quantity,
        ImageUrl: product.images[0]
      };
    }

    newOrderData.orderedItems = newProductArray;
    newOrderData.orderId = orderId; // Assign newly created order ID
    newOrderData.email = req.user.email;

    const order = new Order(newOrderData);

    await order.save(); // Save order

    res.json({ message: "Order created" });
  } catch (error) {
    console.error("Error during order creation:", error); // Log the error for debugging
    res.status(500).json({ message: error.message });
  }
}




export async function getAllOrders(req,res){

  try{  
    const orders = await Order.find({email : req.user.email})
      //console.log(orders)
    res.json({orders})
    }
  catch(error){res.status(500).json({message: error.message,})}
}